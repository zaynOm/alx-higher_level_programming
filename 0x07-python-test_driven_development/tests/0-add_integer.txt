===================================
Test cases for add_integer function
===================================

>>> add_integer = __import__('0-add_integer').add_integer

Normal cases
------------
	>>> add_integer(1, 4)
	5

	>>> add_integer(100, -10)
	90

	>>> add_integer(2)
	100

Float number cases
------------------
	>>> add_integer(3.5, 2)
	5

	>>> add_integer(10, 5.345)
	15

	>>> add_integer(-9.5, -3.00)
	-12

Non integer cases
-----------------
	>>> add_integer('two')
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(5, 'five')
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer(True, False)
	Traceback (most recent call last):
	TypeError: a must be an integer

Nan & Inf cases
---------
	>>> add_integer(float('nan'), 5)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

	>>> add_integer(3, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
